{
    "sourceFile": "src/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1719858388321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719858675257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,13 +126,17 @@\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n   inputText = fixMissingClosingBracket(inputText)\r\n   inputText = inputText.replace(/\\[Action[=:] (.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n-});\r\n+  });\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n@@ -165,12 +169,10 @@\n \r\n   // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n   // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n   \r\n+  \r\n \r\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n   return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n });\r\n"
                },
                {
                    "date": 1719858825039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,14 +130,22 @@\n   inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n-  inputText = fixMissingClosingBracket(inputText)\r\n+  inputText = fixMissingClosingBracket(inputText);\r\n+\r\n   inputText = inputText.replace(/\\[Action[=:] (.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n+  inputText = inputText.replace(/\\[Action= (.*?)\\]/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  console.log(inputText)\r\n+\r\n   inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n"
                },
                {
                    "date": 1719858884964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,14 +132,14 @@\n   });\r\n \r\n   inputText = fixMissingClosingBracket(inputText);\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:] (.*?)\\]/g, function(match, p1) {\r\n+  inputText = inputText.replace(/\\[Action[=:](.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Action= (.*?)\\]/g, function(match, p1) {\r\n+  inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n"
                },
                {
                    "date": 1719859418951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,12 @@\n   inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n   inputText = fixMissingClosingBracket(inputText);\r\n \r\n   inputText = inputText.replace(/\\[Action[=:](.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n@@ -177,15 +181,8 @@\n \r\n   // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n   // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n \r\n-  \r\n-  \r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-});\r\n-\r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n \t  let regex = new RegExp(tag, 'g');\r\n \t  inputText = inputText.replace(regex, customText);\r\n"
                },
                {
                    "date": 1719859466055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,14 +136,14 @@\n   });\r\n \r\n   inputText = fixMissingClosingBracket(inputText);\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:](.*?)\\]/g, function(match, p1) {\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n+  inputText = inputText.replace(/\\[Action=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n"
                },
                {
                    "date": 1719859828499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,17 +136,17 @@\n   });\r\n \r\n   inputText = fixMissingClosingBracket(inputText);\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:]\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, p1) {\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Action=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n+  // inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n+  //   var customText = actionTexts[p1] || p1;\r\n+  //   return customText ;\r\n+  // });\r\n \r\n   console.log(inputText)\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n"
                },
                {
                    "date": 1719859876382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n-  inputText = fixMissingClosingBracket(inputText);\r\n+  //inputText = fixMissingClosingBracket(inputText);\r\n \r\n   inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n"
                },
                {
                    "date": 1719859884363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n-  //inputText = fixMissingClosingBracket(inputText);\r\n+  inputText = fixMissingClosingBracket(inputText);\r\n \r\n   inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n"
                },
                {
                    "date": 1719859950901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,27 @@\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n+  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n+\r\n+  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n   inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n@@ -146,30 +165,8 @@\n   //   var customText = actionTexts[p1] || p1;\r\n   //   return customText ;\r\n   // });\r\n \r\n-  console.log(inputText)\r\n-\r\n-  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n-\r\n-  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-\r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719859990333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,22 +145,22 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n+  // inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+  //   return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  // });\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n+  // inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+  //   return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  // });\r\n \r\n-  inputText = fixMissingClosingBracket(inputText);\r\n+  // inputText = fixMissingClosingBracket(inputText);\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n+  // inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+  //   let customText = actionTexts[p1] || p1;\r\n+  //   return customText;\r\n+  // });\r\n \r\n   // inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n   //   var customText = actionTexts[p1] || p1;\r\n   //   return customText ;\r\n"
                },
                {
                    "date": 1719860075651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,22 +145,22 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-  // inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-  //   return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  // });\r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n \r\n-  // inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-  //   return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  // });\r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n \r\n-  // inputText = fixMissingClosingBracket(inputText);\r\n+  inputText = fixMissingClosingBracket(inputText);\r\n \r\n-  // inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-  //   let customText = actionTexts[p1] || p1;\r\n-  //   return customText;\r\n-  // });\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n \r\n   // inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n   //   var customText = actionTexts[p1] || p1;\r\n   //   return customText ;\r\n"
                },
                {
                    "date": 1719860103944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,30 @@\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n+  inputText = fixMissingClosingBracket(inputText);\r\n+\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  console.log(inputText)\r\n+\r\n   inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n@@ -145,28 +167,9 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-\r\n-  inputText = fixMissingClosingBracket(inputText);\r\n-\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n-\r\n-  // inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n-  //   var customText = actionTexts[p1] || p1;\r\n-  //   return customText ;\r\n-  // });\r\n-\r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719860163125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,30 +126,14 @@\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-\r\n-  inputText = fixMissingClosingBracket(inputText);\r\n-\r\n+  inputText = fixMissingClosingBracket(inputText)\r\n   inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Action=(.*?)\\]/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  console.log(inputText)\r\n-\r\n   inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n@@ -181,8 +165,17 @@\n \r\n   // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n   // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n \r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+  \r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+});\r\n+\r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n \t  let regex = new RegExp(tag, 'g');\r\n \t  inputText = inputText.replace(regex, customText);\r\n"
                },
                {
                    "date": 1719860770402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n"
                },
                {
                    "date": 1719860820013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,12 +127,8 @@\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n   inputText = fixMissingClosingBracket(inputText)\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n \r\n   //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n@@ -146,8 +142,13 @@\n   inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n \r\n   inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n \r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n+\r\n   inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719860891735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,51 +132,10 @@\n   //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n-  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-\r\n-  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n-  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n   \r\n \r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-});\r\n-\r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n \t  let regex = new RegExp(tag, 'g');\r\n \t  inputText = inputText.replace(regex, customText);\r\n"
                },
                {
                    "date": 1719860927873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,8 +132,18 @@\n   //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n+  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n+\r\n   \r\n \r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n"
                },
                {
                    "date": 1719860954399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,13 @@\n   inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n \r\n   inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n \r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n+\r\n   \r\n \r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n"
                },
                {
                    "date": 1719860992904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,14 @@\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n+  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+\r\n   \r\n \r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n"
                },
                {
                    "date": 1719861020592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,21 @@\n     return customText ;\r\n   });\r\n \r\n \r\n+  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n+  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n+\r\n   \r\n \r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n"
                },
                {
                    "date": 1719861080976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,10 +166,17 @@\n \r\n   // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n   // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n \r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n   \r\n \r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n   Object.keys(tagmap).forEach(function(tag) {\r\n \t  let customText = tagmap[tag];\r\n \t  let regex = new RegExp(tag, 'g');\r\n \t  inputText = inputText.replace(regex, customText);\r\n"
                },
                {
                    "date": 1719861191201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,13 +175,9 @@\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n-  Object.keys(tagmap).forEach(function(tag) {\r\n-\t  let customText = tagmap[tag];\r\n-\t  let regex = new RegExp(tag, 'g');\r\n-\t  inputText = inputText.replace(regex, customText);\r\n-\t});  \r\n+   \r\n \r\n   inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n   return (gender === \"male\") ? genderMale : genderFemale;\r\n });\r\n"
                },
                {
                    "date": 1719861413523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+const VERSION = '0.5.1'\r\n+\r\n+const el_version = document.getElementById('version');\r\n+el_version.textContent = `v.${VERSION}`;\r\n+\r\n+let translation = \"Move with [Action: WASD]\\r\\n\\r\\nHold [Action: SprintHoldAction] to run.\\r\\n\\r\\nWith [Action: Interact] and [Action: Select] you can interact with most objects and containers.\\r\\n\\r\\nPress [Action: BuildMode] to enter and exit Decoration mode.\\r\\n\\r\\n[ControllerType:Click on the [Brown=sign under the clock] or press [Action: OpenTavern] to open and close the tavern, Press [Action: OpenTavern] to open and close the tavern.]\\r\\n\\r\\nPress [Action: OpenInventory] to access the inventory.\\r\\n\\r\\nPress [Action: Pause] to access the pause menu and game options.\";\r\n+\r\n+let controlType = \"keyboard\";\r\n+let gender = 'male';\r\n+\r\n+const controlButtons = document.querySelectorAll('.controller-type .contol-button');\r\n+\r\n+  controlButtons.forEach(function (button) {\r\n+    const controller = button.getAttribute(\"data-type\");\r\n+    button.addEventListener(\"click\", function (e) {\r\n+      controlButtons.forEach(function (otherButton) {\r\n+        otherButton.classList.remove('active');\r\n+      });\r\n+      button.classList.add('active');\r\n+      controlType = controller;\r\n+      updatePreview();\r\n+    });\r\n+  });\r\n+\r\n+const genderButtons = document.querySelectorAll('.gender-select .gender-button');\r\n+const genderPreview = document.querySelector('.selected-gender');\r\n+genderButtons.forEach(function (button) {\r\n+    const selected = button.getAttribute(\"data-gender\");\r\n+    button.addEventListener(\"click\", function (e) {\r\n+      genderButtons.forEach(function (otherButton) {\r\n+        otherButton.classList.remove('active');\r\n+      });\r\n+      button.classList.add('active');\r\n+      gender = selected;\r\n+      genderPreview.textContent = gender;\r\n+      updatePreview();\r\n+    });\r\n+  });\r\n+\r\n+\r\n+\r\n+var control = {\r\n+  keyboard: {\r\n+    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n+    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n+    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n+    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n+    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n+    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n+    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n+    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n+    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n+    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n+    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n+    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n+    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n+    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n+    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n+    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n+    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n+    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n+    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n+  },\r\n+  gamepad: {\r\n+    \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n+    \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n+    \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n+    \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n+    \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n+    \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n+    \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n+    \"Rotate\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n+    \"Style\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n+    \"Use\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n+    \"BuildMode\": \"__IMGSTART__left.png __TITLE__'Left' __IMGEND__\",\r\n+    \"Up\": \"__IMGSTART__up.png __TITLE__'Up' __IMGEND__\",\r\n+    \"SprintHoldAction\": \"__IMGSTART__lt.png __TITLE__'LT' __IMGEND__\",\r\n+    \"Select\": \"__IMGSTART__y.png __TITLE__'A' __IMGEND__\",\r\n+    \"OpenTavern\": \"__IMGSTART__down.png __TITLE__'Down' __IMGEND__\",\r\n+    \"OpenInventory\": \"__IMGSTART__share.png __TITLE__'Share button' __IMGEND__\",\r\n+    \"Pause\": \"__IMGSTART__view.png __TITLE__'View button' __IMGEND__\",\r\n+    \"ScrollUp\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n+    \"ScrollDown\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n+    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\",\r\n+    \"UIAddRemove\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n+  }\r\n+};\r\n+\r\n+let tagmap = {\r\n+\t\"__SPANOPEN\": \"<span class=\",\r\n+\t\"__SPANCLOSE__\": \">\",\r\n+\t\"__SPANEND__\": \"</span>\",\r\n+\t\"__IMGSTART__\" : \"<img src='./images/\",\r\n+\t\"__TITLE__\": \"' title=\",\r\n+\t\"__IMGEND__\": \"/>\"\r\n+}\r\n+\r\n+function fixMissingClosingBracket(inputString) {\r\n+  let openBracketCount = 0;\r\n+  let closeBracketCount = 0;\r\n+  let fixedString = inputString;\r\n+\r\n+  for (let i = 0; i < inputString.length; i++) {\r\n+    if (inputString[i] === '[') {\r\n+      openBracketCount++;\r\n+    } else if (inputString[i] === ']') {\r\n+      closeBracketCount++;\r\n+    }\r\n+  }\r\n+\r\n+  if (openBracketCount > closeBracketCount) {\r\n+    const missingBrackets = openBracketCount - closeBracketCount;\r\n+    for (let i = 0; i < missingBrackets; i++) {\r\n+      fixedString += ']';\r\n+    }\r\n+  }\r\n+\r\n+  return fixedString;\r\n+}\r\n+\r\n+function replaceTagsAndActions(inputText, controlType) {\r\n+  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n+\r\n+  inputText = fixMissingClosingBracket(inputText)\r\n+\r\n+  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n+\r\n+  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+\r\n+  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n+  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+  \r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n+   \r\n+\r\n+  inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n+  return (gender === \"male\") ? genderMale : genderFemale;\r\n+});\r\n+\r\n+  return inputText;\r\n+}\r\n+\r\n+\r\n+const translationTextarea = document.getElementById(\"translation\");\r\n+const preview = document.getElementById(\"preview\");\r\n+\r\n+if(translationTextarea.value.trim().length <= 0){\r\n+  translationTextarea.value = translation;\r\n+  let converted = replaceTagsAndActions(translation,controlType)\r\n+  preview.innerHTML = converted;\r\n+}\r\n+\r\n+translationTextarea.addEventListener(\"input\", function() {\r\n+  updatePreview()\r\n+});\r\n+\r\n+\r\n+function updatePreview() {\r\n+  let inputText = document.getElementById('translation').value;\r\n+  let previewDiv = document.getElementById('preview');\r\n+  let converted = replaceTagsAndActions(inputText,controlType)\r\n+  previewDiv.innerHTML = converted;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719861469999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const el_version = document.getElementById('version');\r\n el_version.textContent = `v.${VERSION}`;\r\n \r\n-let translation = \"Move with [Action: WASD]\\r\\n\\r\\nHold [Action: SprintHoldAction] to run.\\r\\n\\r\\nWith [Action: Interact] and [Action: Select] you can interact with most objects and containers.\\r\\n\\r\\nPress [Action: BuildMode] to enter and exit Decoration mode.\\r\\n\\r\\n[ControllerType:Click on the [Brown=sign under the clock] or press [Action: OpenTavern] to open and close the tavern, Press [Action: OpenTavern] to open and close the tavern.]\\r\\n\\r\\nPress [Action: OpenInventory] to access the inventory.\\r\\n\\r\\nPress [Action: Pause] to access the pause menu and game options.\";\r\n+let translation = \"To place the new items, press [Action=OpenInventory] and move them from the [Red=inventory] to the [Red=action bar].\\n\\nWith decoration mode active ([Action=BuildMode]), you can [Brown=place an item] by navigating to its slot with [Action=ScrollUp] - [Action=ScrollDown] [ControllerType=or [Brown=clicking] on its icon in the action bar and right-clicking/ and pressing [Action=Use]].\\n\\nPlace all your new items in the tavern to continue, and remember to deactivate decoration mode ([Action=BuildMode]) when you're done.\";\r\n \r\n let controlType = \"keyboard\";\r\n let gender = 'male';\r\n \r\n@@ -204,213 +204,5 @@\n   let inputText = document.getElementById('translation').value;\r\n   let previewDiv = document.getElementById('preview');\r\n   let converted = replaceTagsAndActions(inputText,controlType)\r\n   previewDiv.innerHTML = converted;\r\n-}\n-const VERSION = '0.5.1'\r\n-\r\n-const el_version = document.getElementById('version');\r\n-el_version.textContent = `v.${VERSION}`;\r\n-\r\n-let translation = \"Move with [Action: WASD]\\r\\n\\r\\nHold [Action: SprintHoldAction] to run.\\r\\n\\r\\nWith [Action: Interact] and [Action: Select] you can interact with most objects and containers.\\r\\n\\r\\nPress [Action: BuildMode] to enter and exit Decoration mode.\\r\\n\\r\\n[ControllerType:Click on the [Brown=sign under the clock] or press [Action: OpenTavern] to open and close the tavern, Press [Action: OpenTavern] to open and close the tavern.]\\r\\n\\r\\nPress [Action: OpenInventory] to access the inventory.\\r\\n\\r\\nPress [Action: Pause] to access the pause menu and game options.\";\r\n-\r\n-let controlType = \"keyboard\";\r\n-let gender = 'male';\r\n-\r\n-const controlButtons = document.querySelectorAll('.controller-type .contol-button');\r\n-\r\n-  controlButtons.forEach(function (button) {\r\n-    const controller = button.getAttribute(\"data-type\");\r\n-    button.addEventListener(\"click\", function (e) {\r\n-      controlButtons.forEach(function (otherButton) {\r\n-        otherButton.classList.remove('active');\r\n-      });\r\n-      button.classList.add('active');\r\n-      controlType = controller;\r\n-      updatePreview();\r\n-    });\r\n-  });\r\n-\r\n-const genderButtons = document.querySelectorAll('.gender-select .gender-button');\r\n-const genderPreview = document.querySelector('.selected-gender');\r\n-genderButtons.forEach(function (button) {\r\n-    const selected = button.getAttribute(\"data-gender\");\r\n-    button.addEventListener(\"click\", function (e) {\r\n-      genderButtons.forEach(function (otherButton) {\r\n-        otherButton.classList.remove('active');\r\n-      });\r\n-      button.classList.add('active');\r\n-      gender = selected;\r\n-      genderPreview.textContent = gender;\r\n-      updatePreview();\r\n-    });\r\n-  });\r\n-\r\n-\r\n-\r\n-var control = {\r\n-  keyboard: {\r\n-    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n-    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n-    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n-    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n-    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n-    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n-    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n-    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n-    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n-    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n-    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n-    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n-    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n-    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n-    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n-    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n-    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n-    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n-    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n-  },\r\n-  gamepad: {\r\n-    \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n-    \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n-    \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n-    \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n-    \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n-    \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n-    \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n-    \"Rotate\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n-    \"Style\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n-    \"Use\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n-    \"BuildMode\": \"__IMGSTART__left.png __TITLE__'Left' __IMGEND__\",\r\n-    \"Up\": \"__IMGSTART__up.png __TITLE__'Up' __IMGEND__\",\r\n-    \"SprintHoldAction\": \"__IMGSTART__lt.png __TITLE__'LT' __IMGEND__\",\r\n-    \"Select\": \"__IMGSTART__y.png __TITLE__'A' __IMGEND__\",\r\n-    \"OpenTavern\": \"__IMGSTART__down.png __TITLE__'Down' __IMGEND__\",\r\n-    \"OpenInventory\": \"__IMGSTART__share.png __TITLE__'Share button' __IMGEND__\",\r\n-    \"Pause\": \"__IMGSTART__view.png __TITLE__'View button' __IMGEND__\",\r\n-    \"ScrollUp\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n-    \"ScrollDown\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n-    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\",\r\n-    \"UIAddRemove\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n-  }\r\n-};\r\n-\r\n-let tagmap = {\r\n-\t\"__SPANOPEN\": \"<span class=\",\r\n-\t\"__SPANCLOSE__\": \">\",\r\n-\t\"__SPANEND__\": \"</span>\",\r\n-\t\"__IMGSTART__\" : \"<img src='./images/\",\r\n-\t\"__TITLE__\": \"' title=\",\r\n-\t\"__IMGEND__\": \"/>\"\r\n-}\r\n-\r\n-function fixMissingClosingBracket(inputString) {\r\n-  let openBracketCount = 0;\r\n-  let closeBracketCount = 0;\r\n-  let fixedString = inputString;\r\n-\r\n-  for (let i = 0; i < inputString.length; i++) {\r\n-    if (inputString[i] === '[') {\r\n-      openBracketCount++;\r\n-    } else if (inputString[i] === ']') {\r\n-      closeBracketCount++;\r\n-    }\r\n-  }\r\n-\r\n-  if (openBracketCount > closeBracketCount) {\r\n-    const missingBrackets = openBracketCount - closeBracketCount;\r\n-    for (let i = 0; i < missingBrackets; i++) {\r\n-      fixedString += ']';\r\n-    }\r\n-  }\r\n-\r\n-  return fixedString;\r\n-}\r\n-\r\n-function replaceTagsAndActions(inputText, controlType) {\r\n-  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n-\r\n-  inputText = fixMissingClosingBracket(inputText)\r\n-\r\n-  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n-\r\n-  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-\r\n-  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n-  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-  \r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-\r\n-   \r\n-\r\n-  inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n-  return (gender === \"male\") ? genderMale : genderFemale;\r\n-});\r\n-\r\n-  return inputText;\r\n-}\r\n-\r\n-\r\n-const translationTextarea = document.getElementById(\"translation\");\r\n-const preview = document.getElementById(\"preview\");\r\n-\r\n-if(translationTextarea.value.trim().length <= 0){\r\n-  translationTextarea.value = translation;\r\n-  let converted = replaceTagsAndActions(translation,controlType)\r\n-  preview.innerHTML = converted;\r\n-}\r\n-\r\n-translationTextarea.addEventListener(\"input\", function() {\r\n-  updatePreview()\r\n-});\r\n-\r\n-\r\n-function updatePreview() {\r\n-  let inputText = document.getElementById('translation').value;\r\n-  let previewDiv = document.getElementById('preview');\r\n-  let converted = replaceTagsAndActions(inputText,controlType)\r\n-  previewDiv.innerHTML = converted;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719861559289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,12 +172,16 @@\n   });\r\n   \r\n \r\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n+  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+});\r\n \r\n-   \r\n+  Object.keys(tagmap).forEach(function(tag) {\r\n+\t  let customText = tagmap[tag];\r\n+\t  let regex = new RegExp(tag, 'g');\r\n+\t  inputText = inputText.replace(regex, customText);\r\n+\t});  \r\n \r\n   inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n   return (gender === \"male\") ? genderMale : genderFemale;\r\n });\r\n"
                },
                {
                    "date": 1719861861385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,14 @@\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n   inputText = fixMissingClosingBracket(inputText)\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n \r\n-  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n@@ -142,13 +146,8 @@\n   inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n \r\n   inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n-\r\n   inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719862334402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     let customText = actionTexts[p1] || p1;\r\n     return customText;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n"
                },
                {
                    "date": 1719862391079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,13 +126,10 @@\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n-  inputText = fixMissingClosingBracket(inputText)\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n+  //inputText = fixMissingClosingBracket(inputText)\r\n+  \r\n \r\n   //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n@@ -151,9 +148,14 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n \r\n+\r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719862396193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,12 +148,9 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n-    let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n+  \r\n \r\n \r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n"
                },
                {
                    "date": 1719862552169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,13 @@\n function replaceTagsAndActions(inputText, controlType) {\r\n   var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n   //inputText = fixMissingClosingBracket(inputText)\r\n+\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n   \r\n \r\n   //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n \r\n@@ -148,11 +153,9 @@\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-  \r\n \r\n-\r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n"
                },
                {
                    "date": 1719863060970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,16 +173,16 @@\n   });\r\n   \r\n \r\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-});\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n \r\n-  Object.keys(tagmap).forEach(function(tag) {\r\n-\t  let customText = tagmap[tag];\r\n-\t  let regex = new RegExp(tag, 'g');\r\n-\t  inputText = inputText.replace(regex, customText);\r\n-\t});  \r\n+  // Object.keys(tagmap).forEach(function(tag) {\r\n+\t//   let customText = tagmap[tag];\r\n+\t//   let regex = new RegExp(tag, 'g');\r\n+\t//   inputText = inputText.replace(regex, customText);\r\n+\t// });  \r\n \r\n   inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n   return (gender === \"male\") ? genderMale : genderFemale;\r\n });\r\n"
                },
                {
                    "date": 1719863400496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,32 +40,32 @@\n \r\n \r\n var control = {\r\n   keyboard: {\r\n-    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n-    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n-    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n-    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n-    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n-    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n-    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n-    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n-    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n-    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n-    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n-    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n-    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n-    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n-    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n-    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n-    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n-    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n+    \"WASD\": \"<span class= 'brown'>W/A/S/D__SPANEND__\",\r\n+    \"RightStick\": \"<span class= 'brown'>Left Mouse Button__SPANEND__\",\r\n+    \"ObjectMove\": \"<span class= 'brown'>Mouse__SPANEND__\",\r\n+    \"LeftMouseDetect\": \"<span class= 'brown'>Left Mouse Button__SPANEND__\",\r\n+    \"RightMouseDetect\": \"<span class= 'brown'>Right Mouse Button__SPANEND__\",\r\n+    \"{0}\": \"<span class= 'brown'>SPACE__SPANEND__\",\r\n+    \"UIInteract\": \"<span class= 'brown'>START__SPANEND__\",\r\n+    \"Interact\": \"<span class= 'brown'>E__SPANEND__\",\r\n+    \"Rotate\": \"<span class= 'brown'>R__SPANEND__\",\r\n+    \"Style\": \"<span class= 'brown'>T__SPANEND__\",\r\n+    \"Use\": \"<span class= 'brown'>F__SPANEND__\",\r\n+    \"BuildMode\": \"<span class= 'brown'>B__SPANEND__\",\r\n+    \"SprintHoldAction\": \"<span class= 'brown'>SHIFT__SPANEND__\",\r\n+    \"Select\": \"<span class= 'brown'>F__SPANEND__\",\r\n+    \"OpenTavern\": \"<span class= 'brown'>O__SPANEND__\",\r\n+    \"OpenInventory\": \"<span class= 'brown'>I__SPANEND__\",\r\n+    \"Pause\": \"<span class= 'brown'>Esc__SPANEND__\",\r\n+    \"OpenStats\": \"<span class= 'brown'>L__SPANEND__\",\r\n+    \"OpenTalents\": \"<span class= 'brown'>T__SPANEND__\",\r\n+    \"OpenXPModifiers\": \"<span class= 'brown'>X__SPANEND__\",\r\n+    \"OpenRecipeBook\": \"<span class= 'brown'>K__SPANEND__\",\r\n+    \"OpenQuests\": \"<span class= 'brown'>H__SPANEND__\",\r\n+    \"ScrollUp\": \"<span class= 'brown'>Mouse Scroll Up__SPANEND__\",\r\n+    \"ScrollDown\": \"<span class= 'brown'>Mouse Scroll Down__SPANEND__\",\r\n     \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n   },\r\n   gamepad: {\r\n     \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n"
                },
                {
                    "date": 1719863418520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,32 +40,32 @@\n \r\n \r\n var control = {\r\n   keyboard: {\r\n-    \"WASD\": \"<span class= 'brown'>W/A/S/D__SPANEND__\",\r\n-    \"RightStick\": \"<span class= 'brown'>Left Mouse Button__SPANEND__\",\r\n-    \"ObjectMove\": \"<span class= 'brown'>Mouse__SPANEND__\",\r\n-    \"LeftMouseDetect\": \"<span class= 'brown'>Left Mouse Button__SPANEND__\",\r\n-    \"RightMouseDetect\": \"<span class= 'brown'>Right Mouse Button__SPANEND__\",\r\n-    \"{0}\": \"<span class= 'brown'>SPACE__SPANEND__\",\r\n-    \"UIInteract\": \"<span class= 'brown'>START__SPANEND__\",\r\n-    \"Interact\": \"<span class= 'brown'>E__SPANEND__\",\r\n-    \"Rotate\": \"<span class= 'brown'>R__SPANEND__\",\r\n-    \"Style\": \"<span class= 'brown'>T__SPANEND__\",\r\n-    \"Use\": \"<span class= 'brown'>F__SPANEND__\",\r\n-    \"BuildMode\": \"<span class= 'brown'>B__SPANEND__\",\r\n-    \"SprintHoldAction\": \"<span class= 'brown'>SHIFT__SPANEND__\",\r\n-    \"Select\": \"<span class= 'brown'>F__SPANEND__\",\r\n-    \"OpenTavern\": \"<span class= 'brown'>O__SPANEND__\",\r\n-    \"OpenInventory\": \"<span class= 'brown'>I__SPANEND__\",\r\n-    \"Pause\": \"<span class= 'brown'>Esc__SPANEND__\",\r\n-    \"OpenStats\": \"<span class= 'brown'>L__SPANEND__\",\r\n-    \"OpenTalents\": \"<span class= 'brown'>T__SPANEND__\",\r\n-    \"OpenXPModifiers\": \"<span class= 'brown'>X__SPANEND__\",\r\n-    \"OpenRecipeBook\": \"<span class= 'brown'>K__SPANEND__\",\r\n-    \"OpenQuests\": \"<span class= 'brown'>H__SPANEND__\",\r\n-    \"ScrollUp\": \"<span class= 'brown'>Mouse Scroll Up__SPANEND__\",\r\n-    \"ScrollDown\": \"<span class= 'brown'>Mouse Scroll Down__SPANEND__\",\r\n+    \"WASD\": \"<span class= 'brown'>W/A/S/D</span>\",\r\n+    \"RightStick\": \"<span class= 'brown'>Left Mouse Button</span>\",\r\n+    \"ObjectMove\": \"<span class= 'brown'>Mouse</span>\",\r\n+    \"LeftMouseDetect\": \"<span class= 'brown'>Left Mouse Button</span>\",\r\n+    \"RightMouseDetect\": \"<span class= 'brown'>Right Mouse Button</span>\",\r\n+    \"{0}\": \"<span class= 'brown'>SPACE</span>\",\r\n+    \"UIInteract\": \"<span class= 'brown'>START</span>\",\r\n+    \"Interact\": \"<span class= 'brown'>E</span>\",\r\n+    \"Rotate\": \"<span class= 'brown'>R</span>\",\r\n+    \"Style\": \"<span class= 'brown'>T</span>\",\r\n+    \"Use\": \"<span class= 'brown'>F</span>\",\r\n+    \"BuildMode\": \"<span class= 'brown'>B</span>\",\r\n+    \"SprintHoldAction\": \"<span class= 'brown'>SHIFT</span>\",\r\n+    \"Select\": \"<span class= 'brown'>F</span>\",\r\n+    \"OpenTavern\": \"<span class= 'brown'>O</span>\",\r\n+    \"OpenInventory\": \"<span class= 'brown'>I</span>\",\r\n+    \"Pause\": \"<span class= 'brown'>Esc</span>\",\r\n+    \"OpenStats\": \"<span class= 'brown'>L</span>\",\r\n+    \"OpenTalents\": \"<span class= 'brown'>T</span>\",\r\n+    \"OpenXPModifiers\": \"<span class= 'brown'>X</span>\",\r\n+    \"OpenRecipeBook\": \"<span class= 'brown'>K</span>\",\r\n+    \"OpenQuests\": \"<span class= 'brown'>H</span>\",\r\n+    \"ScrollUp\": \"<span class= 'brown'>Mouse Scroll Up</span>\",\r\n+    \"ScrollDown\": \"<span class= 'brown'>Mouse Scroll Down</span>\",\r\n     \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n   },\r\n   gamepad: {\r\n     \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n"
                },
                {
                    "date": 1719863840149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,32 +40,32 @@\n \r\n \r\n var control = {\r\n   keyboard: {\r\n-    \"WASD\": \"<span class= 'brown'>W/A/S/D</span>\",\r\n-    \"RightStick\": \"<span class= 'brown'>Left Mouse Button</span>\",\r\n-    \"ObjectMove\": \"<span class= 'brown'>Mouse</span>\",\r\n-    \"LeftMouseDetect\": \"<span class= 'brown'>Left Mouse Button</span>\",\r\n-    \"RightMouseDetect\": \"<span class= 'brown'>Right Mouse Button</span>\",\r\n-    \"{0}\": \"<span class= 'brown'>SPACE</span>\",\r\n-    \"UIInteract\": \"<span class= 'brown'>START</span>\",\r\n-    \"Interact\": \"<span class= 'brown'>E</span>\",\r\n-    \"Rotate\": \"<span class= 'brown'>R</span>\",\r\n-    \"Style\": \"<span class= 'brown'>T</span>\",\r\n-    \"Use\": \"<span class= 'brown'>F</span>\",\r\n-    \"BuildMode\": \"<span class= 'brown'>B</span>\",\r\n-    \"SprintHoldAction\": \"<span class= 'brown'>SHIFT</span>\",\r\n-    \"Select\": \"<span class= 'brown'>F</span>\",\r\n-    \"OpenTavern\": \"<span class= 'brown'>O</span>\",\r\n-    \"OpenInventory\": \"<span class= 'brown'>I</span>\",\r\n-    \"Pause\": \"<span class= 'brown'>Esc</span>\",\r\n-    \"OpenStats\": \"<span class= 'brown'>L</span>\",\r\n-    \"OpenTalents\": \"<span class= 'brown'>T</span>\",\r\n-    \"OpenXPModifiers\": \"<span class= 'brown'>X</span>\",\r\n-    \"OpenRecipeBook\": \"<span class= 'brown'>K</span>\",\r\n-    \"OpenQuests\": \"<span class= 'brown'>H</span>\",\r\n-    \"ScrollUp\": \"<span class= 'brown'>Mouse Scroll Up</span>\",\r\n-    \"ScrollDown\": \"<span class= 'brown'>Mouse Scroll Down</span>\",\r\n+    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n+    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n+    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n+    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n+    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n+    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n+    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n+    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n+    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n+    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n+    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n+    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n+    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n+    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n+    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n+    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n+    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n+    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n     \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n   },\r\n   gamepad: {\r\n     \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n@@ -134,21 +134,20 @@\n     return customText;\r\n   });\r\n   \r\n \r\n-  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n+  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"brown\">$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '__SPANOPEN\"brown\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n+  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n-  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n \r\n   inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n     var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n@@ -180,10 +179,12 @@\n   // Object.keys(tagmap).forEach(function(tag) {\r\n \t//   let customText = tagmap[tag];\r\n \t//   let regex = new RegExp(tag, 'g');\r\n \t//   inputText = inputText.replace(regex, customText);\r\n-\t// });  \r\n+\t// });\r\n \r\n+  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n+\r\n   inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n   return (gender === \"male\") ? genderMale : genderFemale;\r\n });\r\n \r\n"
                },
                {
                    "date": 1719863846996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,13 +175,13 @@\n   inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n     return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n   });\r\n \r\n-  // Object.keys(tagmap).forEach(function(tag) {\r\n-\t//   let customText = tagmap[tag];\r\n-\t//   let regex = new RegExp(tag, 'g');\r\n-\t//   inputText = inputText.replace(regex, customText);\r\n-\t// });\r\n+  Object.keys(tagmap).forEach(function(tag) {\r\n+\t  let customText = tagmap[tag];\r\n+\t  let regex = new RegExp(tag, 'g');\r\n+\t  inputText = inputText.replace(regex, customText);\r\n+\t});\r\n \r\n   inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n \r\n   inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n"
                },
                {
                    "date": 1719863878521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n     return customText;\r\n   });\r\n   \r\n \r\n-  //inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"brown\">$1__SPANEND__');\r\n+  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"brown\">$1__SPANEND__');\r\n \r\n   inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '__SPANOPEN\"brown\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n   inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n"
                },
                {
                    "date": 1719864708147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+const VERSION = '0.6'\r\n+\r\n+const el_version = document.getElementById('version');\r\n+el_version.textContent = `v.${VERSION}`;\r\n+\r\n+let translation = \"To place the new items, press [Action=OpenInventory] and move them from the [Red=inventory] to the [Red=action bar].\\n\\nWith decoration mode active ([Action=BuildMode]), you can [Brown=place an item] by navigating to its slot with [Action=ScrollUp] - [Action=ScrollDown] [ControllerType=or [Brown=clicking] on its icon in the action bar and right-clicking/ and pressing [Action=Use]].\\n\\nPlace all your new items in the tavern to continue, and remember to deactivate decoration mode ([Action=BuildMode]) when you're done.\";\r\n+\r\n+let controlType = \"keyboard\";\r\n+let gender = 'male';\r\n+\r\n+const controlButtons = document.querySelectorAll('.controller-type .contol-button');\r\n+\r\n+  controlButtons.forEach(function (button) {\r\n+    const controller = button.getAttribute(\"data-type\");\r\n+    button.addEventListener(\"click\", function (e) {\r\n+      controlButtons.forEach(function (otherButton) {\r\n+        otherButton.classList.remove('active');\r\n+      });\r\n+      button.classList.add('active');\r\n+      controlType = controller;\r\n+      updatePreview();\r\n+    });\r\n+  });\r\n+\r\n+const genderButtons = document.querySelectorAll('.gender-select .gender-button');\r\n+const genderPreview = document.querySelector('.selected-gender');\r\n+genderButtons.forEach(function (button) {\r\n+    const selected = button.getAttribute(\"data-gender\");\r\n+    button.addEventListener(\"click\", function (e) {\r\n+      genderButtons.forEach(function (otherButton) {\r\n+        otherButton.classList.remove('active');\r\n+      });\r\n+      button.classList.add('active');\r\n+      gender = selected;\r\n+      genderPreview.textContent = gender;\r\n+      updatePreview();\r\n+    });\r\n+  });\r\n+\r\n+\r\n+\r\n+var control = {\r\n+  keyboard: {\r\n+    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n+    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n+    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n+    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n+    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n+    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n+    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n+    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n+    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n+    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n+    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n+    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n+    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n+    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n+    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n+    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n+    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n+    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n+    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n+    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n+    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n+    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n+  },\r\n+  gamepad: {\r\n+    \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n+    \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n+    \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n+    \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n+    \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n+    \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n+    \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n+    \"Rotate\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n+    \"Style\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n+    \"Use\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n+    \"BuildMode\": \"__IMGSTART__left.png __TITLE__'Left' __IMGEND__\",\r\n+    \"Up\": \"__IMGSTART__up.png __TITLE__'Up' __IMGEND__\",\r\n+    \"SprintHoldAction\": \"__IMGSTART__lt.png __TITLE__'LT' __IMGEND__\",\r\n+    \"Select\": \"__IMGSTART__y.png __TITLE__'A' __IMGEND__\",\r\n+    \"OpenTavern\": \"__IMGSTART__down.png __TITLE__'Down' __IMGEND__\",\r\n+    \"OpenInventory\": \"__IMGSTART__share.png __TITLE__'Share button' __IMGEND__\",\r\n+    \"Pause\": \"__IMGSTART__view.png __TITLE__'View button' __IMGEND__\",\r\n+    \"ScrollUp\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n+    \"ScrollDown\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n+    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\",\r\n+    \"UIAddRemove\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n+  }\r\n+};\r\n+\r\n+let tagmap = {\r\n+\t\"__SPANOPEN\": \"<span class=\",\r\n+\t\"__SPANCLOSE__\": \">\",\r\n+\t\"__SPANEND__\": \"</span>\",\r\n+\t\"__IMGSTART__\" : \"<img src='./images/\",\r\n+\t\"__TITLE__\": \"' title=\",\r\n+\t\"__IMGEND__\": \"/>\"\r\n+}\r\n+\r\n+function fixMissingClosingBracket(inputString) {\r\n+  let openBracketCount = 0;\r\n+  let closeBracketCount = 0;\r\n+  let fixedString = inputString;\r\n+\r\n+  for (let i = 0; i < inputString.length; i++) {\r\n+    if (inputString[i] === '[') {\r\n+      openBracketCount++;\r\n+    } else if (inputString[i] === ']') {\r\n+      closeBracketCount++;\r\n+    }\r\n+  }\r\n+\r\n+  if (openBracketCount > closeBracketCount) {\r\n+    const missingBrackets = openBracketCount - closeBracketCount;\r\n+    for (let i = 0; i < missingBrackets; i++) {\r\n+      fixedString += ']';\r\n+    }\r\n+  }\r\n+\r\n+  return fixedString;\r\n+}\r\n+\r\n+function replaceTagsAndActions(inputText, controlType) {\r\n+  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n+\r\n+  //inputText = fixMissingClosingBracket(inputText)\r\n+\r\n+  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n+    let customText = actionTexts[p1] || p1;\r\n+    return customText;\r\n+  });\r\n+  \r\n+\r\n+  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"brown\">$1__SPANEND__');\r\n+\r\n+  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '__SPANOPEN\"brown\"__SPANCLOSE__$1__SPANEND__');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n+\r\n+  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n+\r\n+  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n+\r\n+\r\n+  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+\r\n+  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n+    var customText = actionTexts[p1] || p1;\r\n+    return customText ;\r\n+  });\r\n+\r\n+  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n+  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+  \r\n+\r\n+  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n+    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n+  });\r\n+\r\n+  Object.keys(tagmap).forEach(function(tag) {\r\n+\t  let customText = tagmap[tag];\r\n+\t  let regex = new RegExp(tag, 'g');\r\n+\t  inputText = inputText.replace(regex, customText);\r\n+\t});\r\n+\r\n+  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n+\r\n+  inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n+  return (gender === \"male\") ? genderMale : genderFemale;\r\n+});\r\n+\r\n+  return inputText;\r\n+}\r\n+\r\n+\r\n+const translationTextarea = document.getElementById(\"translation\");\r\n+const preview = document.getElementById(\"preview\");\r\n+\r\n+if(translationTextarea.value.trim().length <= 0){\r\n+  translationTextarea.value = translation;\r\n+  let converted = replaceTagsAndActions(translation,controlType)\r\n+  preview.innerHTML = converted;\r\n+}\r\n+\r\n+translationTextarea.addEventListener(\"input\", function() {\r\n+  updatePreview()\r\n+});\r\n+\r\n+\r\n+function updatePreview() {\r\n+  let inputText = document.getElementById('translation').value;\r\n+  let previewDiv = document.getElementById('preview');\r\n+  let converted = replaceTagsAndActions(inputText,controlType)\r\n+  previewDiv.innerHTML = converted;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719938709110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,14 @@\n   });\r\n \r\n \r\n \r\n-var control = {\r\n+let control = {\r\n   keyboard: {\r\n     \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n     \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n     \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n+    \"Objective\": \"__SPANOPEN 'brown'__SPANCLOSE__?__SPANEND__\",\r\n     \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n     \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n     \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n     \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n@@ -70,8 +71,9 @@\n   gamepad: {\r\n     \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n     \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n     \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n+    \"Objective\": \"__IMGSTART__unknown.png __TITLE__'Right Stick' __IMGEND__\",\r\n     \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n     \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n     \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n     \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n@@ -124,9 +126,9 @@\n   return fixedString;\r\n }\r\n \r\n function replaceTagsAndActions(inputText, controlType) {\r\n-  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n+  let actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n \r\n   //inputText = fixMissingClosingBracket(inputText)\r\n \r\n   inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n@@ -148,237 +150,23 @@\n   inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n \r\n \r\n   inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n+    let customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n \r\n   inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n+    let customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n   inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n-  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-  \r\n-\r\n-  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n-    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n-  });\r\n-\r\n-  Object.keys(tagmap).forEach(function(tag) {\r\n-\t  let customText = tagmap[tag];\r\n-\t  let regex = new RegExp(tag, 'g');\r\n-\t  inputText = inputText.replace(regex, customText);\r\n-\t});\r\n-\r\n-  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n-\r\n-  inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n-  return (gender === \"male\") ? genderMale : genderFemale;\r\n-});\r\n-\r\n-  return inputText;\r\n-}\r\n-\r\n-\r\n-const translationTextarea = document.getElementById(\"translation\");\r\n-const preview = document.getElementById(\"preview\");\r\n-\r\n-if(translationTextarea.value.trim().length <= 0){\r\n-  translationTextarea.value = translation;\r\n-  let converted = replaceTagsAndActions(translation,controlType)\r\n-  preview.innerHTML = converted;\r\n-}\r\n-\r\n-translationTextarea.addEventListener(\"input\", function() {\r\n-  updatePreview()\r\n-});\r\n-\r\n-\r\n-function updatePreview() {\r\n-  let inputText = document.getElementById('translation').value;\r\n-  let previewDiv = document.getElementById('preview');\r\n-  let converted = replaceTagsAndActions(inputText,controlType)\r\n-  previewDiv.innerHTML = converted;\r\n-}\n-const VERSION = '0.5.1'\r\n-\r\n-const el_version = document.getElementById('version');\r\n-el_version.textContent = `v.${VERSION}`;\r\n-\r\n-let translation = \"To place the new items, press [Action=OpenInventory] and move them from the [Red=inventory] to the [Red=action bar].\\n\\nWith decoration mode active ([Action=BuildMode]), you can [Brown=place an item] by navigating to its slot with [Action=ScrollUp] - [Action=ScrollDown] [ControllerType=or [Brown=clicking] on its icon in the action bar and right-clicking/ and pressing [Action=Use]].\\n\\nPlace all your new items in the tavern to continue, and remember to deactivate decoration mode ([Action=BuildMode]) when you're done.\";\r\n-\r\n-let controlType = \"keyboard\";\r\n-let gender = 'male';\r\n-\r\n-const controlButtons = document.querySelectorAll('.controller-type .contol-button');\r\n-\r\n-  controlButtons.forEach(function (button) {\r\n-    const controller = button.getAttribute(\"data-type\");\r\n-    button.addEventListener(\"click\", function (e) {\r\n-      controlButtons.forEach(function (otherButton) {\r\n-        otherButton.classList.remove('active');\r\n-      });\r\n-      button.classList.add('active');\r\n-      controlType = controller;\r\n-      updatePreview();\r\n-    });\r\n-  });\r\n-\r\n-const genderButtons = document.querySelectorAll('.gender-select .gender-button');\r\n-const genderPreview = document.querySelector('.selected-gender');\r\n-genderButtons.forEach(function (button) {\r\n-    const selected = button.getAttribute(\"data-gender\");\r\n-    button.addEventListener(\"click\", function (e) {\r\n-      genderButtons.forEach(function (otherButton) {\r\n-        otherButton.classList.remove('active');\r\n-      });\r\n-      button.classList.add('active');\r\n-      gender = selected;\r\n-      genderPreview.textContent = gender;\r\n-      updatePreview();\r\n-    });\r\n-  });\r\n-\r\n-\r\n-\r\n-var control = {\r\n-  keyboard: {\r\n-    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n-    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n-    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n-    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n-    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n-    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n-    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n-    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n-    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n-    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n-    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n-    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n-    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n-    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n-    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n-    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n-    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n-    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n-    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n-    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n-    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n-    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n-  },\r\n-  gamepad: {\r\n-    \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n-    \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n-    \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n-    \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n-    \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n-    \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n-    \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n-    \"Rotate\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n-    \"Style\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n-    \"Use\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n-    \"BuildMode\": \"__IMGSTART__left.png __TITLE__'Left' __IMGEND__\",\r\n-    \"Up\": \"__IMGSTART__up.png __TITLE__'Up' __IMGEND__\",\r\n-    \"SprintHoldAction\": \"__IMGSTART__lt.png __TITLE__'LT' __IMGEND__\",\r\n-    \"Select\": \"__IMGSTART__y.png __TITLE__'A' __IMGEND__\",\r\n-    \"OpenTavern\": \"__IMGSTART__down.png __TITLE__'Down' __IMGEND__\",\r\n-    \"OpenInventory\": \"__IMGSTART__share.png __TITLE__'Share button' __IMGEND__\",\r\n-    \"Pause\": \"__IMGSTART__view.png __TITLE__'View button' __IMGEND__\",\r\n-    \"ScrollUp\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n-    \"ScrollDown\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n-    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\",\r\n-    \"UIAddRemove\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n-  }\r\n-};\r\n-\r\n-let tagmap = {\r\n-\t\"__SPANOPEN\": \"<span class=\",\r\n-\t\"__SPANCLOSE__\": \">\",\r\n-\t\"__SPANEND__\": \"</span>\",\r\n-\t\"__IMGSTART__\" : \"<img src='./images/\",\r\n-\t\"__TITLE__\": \"' title=\",\r\n-\t\"__IMGEND__\": \"/>\"\r\n-}\r\n-\r\n-function fixMissingClosingBracket(inputString) {\r\n-  let openBracketCount = 0;\r\n-  let closeBracketCount = 0;\r\n-  let fixedString = inputString;\r\n-\r\n-  for (let i = 0; i < inputString.length; i++) {\r\n-    if (inputString[i] === '[') {\r\n-      openBracketCount++;\r\n-    } else if (inputString[i] === ']') {\r\n-      closeBracketCount++;\r\n-    }\r\n-  }\r\n-\r\n-  if (openBracketCount > closeBracketCount) {\r\n-    const missingBrackets = openBracketCount - closeBracketCount;\r\n-    for (let i = 0; i < missingBrackets; i++) {\r\n-      fixedString += ']';\r\n-    }\r\n-  }\r\n-\r\n-  return fixedString;\r\n-}\r\n-\r\n-function replaceTagsAndActions(inputText, controlType) {\r\n-  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n-\r\n-  //inputText = fixMissingClosingBracket(inputText)\r\n-\r\n-  inputText = inputText.replace(/\\[Action[=:]\\s*(.*?)\\]/g, function(match, p1) {\r\n     let customText = actionTexts[p1] || p1;\r\n-    return customText;\r\n-  });\r\n-  \r\n-\r\n-  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"brown\">$1__SPANEND__');\r\n-\r\n-  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '__SPANOPEN\"brown\"__SPANCLOSE__$1__SPANEND__');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n-\r\n-  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '__SPANOPEN\"red\"__SPANCLOSE__$1__SPANEND__');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n-\r\n-  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '__SPANOPEN\"grey\"__SPANCLOSE__$1__SPANEND__');\r\n-\r\n-\r\n-  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n     return customText ;\r\n   });\r\n \r\n-\r\n-  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n-  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n-    var customText = actionTexts[p1] || p1;\r\n-    return customText ;\r\n-  });\r\n-\r\n   // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n   // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n \r\n   inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n"
                },
                {
                    "date": 1719939611656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const VERSION = '0.6'\r\n+const VERSION = '0.6.1'\r\n \r\n const el_version = document.getElementById('version');\r\n el_version.textContent = `v.${VERSION}`;\r\n \r\n"
                }
            ],
            "date": 1719858388321,
            "name": "Commit-0",
            "content": "const VERSION = '0.5.1'\r\n\r\nconst el_version = document.getElementById('version');\r\nel_version.textContent = `v.${VERSION}`;\r\n\r\nlet translation = \"Move with [Action: WASD]\\r\\n\\r\\nHold [Action: SprintHoldAction] to run.\\r\\n\\r\\nWith [Action: Interact] and [Action: Select] you can interact with most objects and containers.\\r\\n\\r\\nPress [Action: BuildMode] to enter and exit Decoration mode.\\r\\n\\r\\n[ControllerType:Click on the [Brown=sign under the clock] or press [Action: OpenTavern] to open and close the tavern, Press [Action: OpenTavern] to open and close the tavern.]\\r\\n\\r\\nPress [Action: OpenInventory] to access the inventory.\\r\\n\\r\\nPress [Action: Pause] to access the pause menu and game options.\";\r\n\r\nlet controlType = \"keyboard\";\r\nlet gender = 'male';\r\n\r\nconst controlButtons = document.querySelectorAll('.controller-type .contol-button');\r\n\r\n  controlButtons.forEach(function (button) {\r\n    const controller = button.getAttribute(\"data-type\");\r\n    button.addEventListener(\"click\", function (e) {\r\n      controlButtons.forEach(function (otherButton) {\r\n        otherButton.classList.remove('active');\r\n      });\r\n      button.classList.add('active');\r\n      controlType = controller;\r\n      updatePreview();\r\n    });\r\n  });\r\n\r\nconst genderButtons = document.querySelectorAll('.gender-select .gender-button');\r\nconst genderPreview = document.querySelector('.selected-gender');\r\ngenderButtons.forEach(function (button) {\r\n    const selected = button.getAttribute(\"data-gender\");\r\n    button.addEventListener(\"click\", function (e) {\r\n      genderButtons.forEach(function (otherButton) {\r\n        otherButton.classList.remove('active');\r\n      });\r\n      button.classList.add('active');\r\n      gender = selected;\r\n      genderPreview.textContent = gender;\r\n      updatePreview();\r\n    });\r\n  });\r\n\r\n\r\n\r\nvar control = {\r\n  keyboard: {\r\n    \"WASD\": \"__SPANOPEN 'brown'__SPANCLOSE__W/A/S/D__SPANEND__\",\r\n    \"RightStick\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n    \"ObjectMove\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse__SPANEND__\",\r\n    \"LeftMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Left Mouse Button__SPANEND__\",\r\n    \"RightMouseDetect\": \"__SPANOPEN 'brown'__SPANCLOSE__Right Mouse Button__SPANEND__\",\r\n    \"{0}\": \"__SPANOPEN 'brown'__SPANCLOSE__SPACE__SPANEND__\",\r\n    \"UIInteract\": \"__SPANOPEN 'brown'__SPANCLOSE__START__SPANEND__\",\r\n    \"Interact\": \"__SPANOPEN 'brown'__SPANCLOSE__E__SPANEND__\",\r\n    \"Rotate\": \"__SPANOPEN 'brown'__SPANCLOSE__R__SPANEND__\",\r\n    \"Style\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n    \"Use\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n    \"BuildMode\": \"__SPANOPEN 'brown'__SPANCLOSE__B__SPANEND__\",\r\n    \"SprintHoldAction\": \"__SPANOPEN 'brown'__SPANCLOSE__SHIFT__SPANEND__\",\r\n    \"Select\": \"__SPANOPEN 'brown'__SPANCLOSE__F__SPANEND__\",\r\n    \"OpenTavern\": \"__SPANOPEN 'brown'__SPANCLOSE__O__SPANEND__\",\r\n    \"OpenInventory\": \"__SPANOPEN 'brown'__SPANCLOSE__I__SPANEND__\",\r\n    \"Pause\": \"__SPANOPEN 'brown'__SPANCLOSE__Esc__SPANEND__\",\r\n    \"OpenStats\": \"__SPANOPEN 'brown'__SPANCLOSE__L__SPANEND__\",\r\n    \"OpenTalents\": \"__SPANOPEN 'brown'__SPANCLOSE__T__SPANEND__\",\r\n    \"OpenXPModifiers\": \"__SPANOPEN 'brown'__SPANCLOSE__X__SPANEND__\",\r\n    \"OpenRecipeBook\": \"__SPANOPEN 'brown'__SPANCLOSE__K__SPANEND__\",\r\n    \"OpenQuests\": \"__SPANOPEN 'brown'__SPANCLOSE__H__SPANEND__\",\r\n    \"ScrollUp\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Up__SPANEND__\",\r\n    \"ScrollDown\": \"__SPANOPEN 'brown'__SPANCLOSE__Mouse Scroll Down__SPANEND__\",\r\n    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\"\r\n  },\r\n  gamepad: {\r\n    \"WASD\": \"__IMGSTART__l_stick.png __TITLE__'Left Stick'  __IMGEND__\",\r\n    \"RightStick\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n    \"ObjectMove\": \"__IMGSTART__r_stick.png __TITLE__'Right Stick' __IMGEND__\",\r\n    \"LeftMouseDetect\": \"<img src='./images/rb.png title='RB'/>\",\r\n    \"{1}\": \"__IMGSTART__share.png __TITLE__'Interact' __IMGEND__\",\r\n    \"UIInteract\": \"__IMGSTART__share.png __TITLE__'Share Button' __IMGEND__\",\r\n    \"Interact\": \"__IMGSTART__a.png __TITLE__'A' __IMGEND__\",\r\n    \"Rotate\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n    \"Style\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n    \"Use\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n    \"BuildMode\": \"__IMGSTART__left.png __TITLE__'Left' __IMGEND__\",\r\n    \"Up\": \"__IMGSTART__up.png __TITLE__'Up' __IMGEND__\",\r\n    \"SprintHoldAction\": \"__IMGSTART__lt.png __TITLE__'LT' __IMGEND__\",\r\n    \"Select\": \"__IMGSTART__y.png __TITLE__'A' __IMGEND__\",\r\n    \"OpenTavern\": \"__IMGSTART__down.png __TITLE__'Down' __IMGEND__\",\r\n    \"OpenInventory\": \"__IMGSTART__share.png __TITLE__'Share button' __IMGEND__\",\r\n    \"Pause\": \"__IMGSTART__view.png __TITLE__'View button' __IMGEND__\",\r\n    \"ScrollUp\": \"__IMGSTART__rb.png __TITLE__'RB' __IMGEND__\",\r\n    \"ScrollDown\": \"__IMGSTART__lb.png __TITLE__'LB' __IMGEND__\",\r\n    \"\\\"Rowdy_Emote\\\"\": \"__IMGSTART__rowdy.png __TITLE__'Rowdy' __IMGEND__\",\r\n    \"UIAddRemove\": \"__IMGSTART__x.png __TITLE__'X' __IMGEND__\",\r\n  }\r\n};\r\n\r\nlet tagmap = {\r\n\t\"__SPANOPEN\": \"<span class=\",\r\n\t\"__SPANCLOSE__\": \">\",\r\n\t\"__SPANEND__\": \"</span>\",\r\n\t\"__IMGSTART__\" : \"<img src='./images/\",\r\n\t\"__TITLE__\": \"' title=\",\r\n\t\"__IMGEND__\": \"/>\"\r\n}\r\n\r\nfunction fixMissingClosingBracket(inputString) {\r\n  let openBracketCount = 0;\r\n  let closeBracketCount = 0;\r\n  let fixedString = inputString;\r\n\r\n  for (let i = 0; i < inputString.length; i++) {\r\n    if (inputString[i] === '[') {\r\n      openBracketCount++;\r\n    } else if (inputString[i] === ']') {\r\n      closeBracketCount++;\r\n    }\r\n  }\r\n\r\n  if (openBracketCount > closeBracketCount) {\r\n    const missingBrackets = openBracketCount - closeBracketCount;\r\n    for (let i = 0; i < missingBrackets; i++) {\r\n      fixedString += ']';\r\n    }\r\n  }\r\n\r\n  return fixedString;\r\n}\r\n\r\nfunction replaceTagsAndActions(inputText, controlType) {\r\n  var actionTexts = (controlType === \"keyboard\") ? control.keyboard : control.gamepad;\r\n\r\n  inputText = fixMissingClosingBracket(inputText)\r\n  inputText = inputText.replace(/\\[Action[=:] (.*?)\\]/g, function(match, p1) {\r\n    let customText = actionTexts[p1] || p1;\r\n    return customText;\r\n});\r\n\r\n  inputText = inputText.replace(/\\[Brown=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"brown\">$1</span>');\r\n\r\n  inputText = inputText.replace(/\\[Brown=([^\\[\\]]+)\\]/g, '<span class=\"brown\">$1</span>');\r\n\r\n  inputText = inputText.replace(/\\[Red=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"red\">$1</span>');\r\n\r\n  inputText = inputText.replace(/\\[Red=([^\\[\\]]+)\\]/g, '<span class=\"red\">$1</span>');\r\n\r\n  inputText = inputText.replace(/\\[Grey=([^[\\]]+\\[[^\\]]+\\][^\\]]*)\\]/g, '<span class=\"grey\">$1</span>');\r\n\r\n  inputText = inputText.replace(/\\[Grey=([^\\[\\]]+)\\]/g, '<span class=\"grey\">$1</span>');\r\n\r\n  inputText = inputText.replace(/<color=(.*?)>/g, '<span style=\"color:$1;\">').replace(/<\\/color>/g,'</span>');\r\n\r\n  inputText = inputText.replace(/<sprite name=(.*?)>/g, function(match, p1) {\r\n    var customText = actionTexts[p1] || p1;\r\n    return customText ;\r\n  });\r\n\r\n\r\n  inputText = inputText.replace(/(\\{0\\})/g, function(match, p1) {\r\n    var customText = actionTexts[p1] || p1;\r\n    return customText ;\r\n  });\r\n\r\n  inputText = inputText.replace(/(\\{1\\})/g, function(match, p1) {\r\n    var customText = actionTexts[p1] || p1;\r\n    return customText ;\r\n  });\r\n\r\n  // /\\[ControllerType: ([^\\]]+), ([^\\]]+)\\]/g\r\n  // /\\[ControllerType:\\s?([^\\]]+),\\s?([^\\]]+)\\]/g\r\n\r\n  inputText = inputText.replace(/\\[ControllerType:\\s?([\\s\\S]*?),\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n    return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n  });\r\n  \r\n\r\n  inputText = inputText.replace(/\\[ControllerType=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, keyboardPart, gamepadPart) {\r\n  return (controlType === \"keyboard\") ? keyboardPart : gamepadPart;\r\n});\r\n\r\n  Object.keys(tagmap).forEach(function(tag) {\r\n\t  let customText = tagmap[tag];\r\n\t  let regex = new RegExp(tag, 'g');\r\n\t  inputText = inputText.replace(regex, customText);\r\n\t});  \r\n\r\n  inputText = inputText.replace(/\\[.*?Gender=\\s?([\\s\\S]*?)\\/\\s?([\\s\\S]*?)\\]/g, function(match, genderMale, genderFemale) {\r\n  return (gender === \"male\") ? genderMale : genderFemale;\r\n});\r\n\r\n  return inputText;\r\n}\r\n\r\n\r\nconst translationTextarea = document.getElementById(\"translation\");\r\nconst preview = document.getElementById(\"preview\");\r\n\r\nif(translationTextarea.value.trim().length <= 0){\r\n  translationTextarea.value = translation;\r\n  let converted = replaceTagsAndActions(translation,controlType)\r\n  preview.innerHTML = converted;\r\n}\r\n\r\ntranslationTextarea.addEventListener(\"input\", function() {\r\n  updatePreview()\r\n});\r\n\r\n\r\nfunction updatePreview() {\r\n  let inputText = document.getElementById('translation').value;\r\n  let previewDiv = document.getElementById('preview');\r\n  let converted = replaceTagsAndActions(inputText,controlType)\r\n  previewDiv.innerHTML = converted;\r\n}"
        }
    ]
}